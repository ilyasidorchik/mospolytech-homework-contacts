{"version":3,"sources":["serviceWorker.ts","pages/ContactList/Contact/Contact.tsx","utils/contacts.js","components/Title/Title.tsx","pages/ContactList/ContactList.tsx","components/ContactLink/ContactLink.tsx","components/ContactForm/ContactForm.tsx","pages/ContactDesc/ContactDesc.tsx","pages/ContactAdd/ContactAdd.tsx","pages/App/App.tsx","index.tsx"],"names":["isLocalhost","Boolean","window","location","hostname","match","register","config","navigator","URL","process","href","origin","addEventListener","swUrl","fetch","then","response","contentType","headers","get","status","indexOf","serviceWorker","ready","registration","unregister","reload","registerValidSW","catch","console","log","checkValidServiceWorker","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","error","Contact","data","lastName","firstName","middleName","id","className","to","getContactList","savedContactList","localStorage","getItem","JSON","parse","addContact","contact","setItem","push","stringify","Title","children","cx","ContactList","useState","contacts","setContacts","useEffect","map","i","key","ContactLink","ContactForm","initialState","businessFunc","buttons","autoFocus","edit","contactAdded","isContactAdded","contactProcessed","isContactProcessed","setContact","handleInputChange","useCallback","e","target","name","value","splice","editContact","handleInputKeyPress","handleSubmit","preventDefault","onSubmit","text","type","placeholder","onChange","onKeyPress","undefined","item","onClick","length","removeItem","removeContact","ContactDesc","useParams","getContact","Number","ContactAdd","App","path","component","exact","startApp","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5186d375.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport './Contact.scss';\n\ntype IContactData = {\n\tlastName?: string;\n\tfirstName?: string;\n\tmiddleName?: string;\n};\n\ninterface IContact {\n\tdata: IContactData;\n\tid: number;\n}\n\nconst Contact: React.FC<IContact> = ({\n\tdata: { lastName, firstName, middleName },\n\tid\n}) => (\n\t<Link className=\"Contact\" to={`/contact/${id}`}>\n\t\t{lastName} {firstName} {middleName}\n\t</Link>\n);\n\nexport default Contact;\n","const getContactList = () => {\n\tconst savedContactList = localStorage.getItem('contacts');\n\tif (savedContactList) {\n\t\treturn JSON.parse(savedContactList);\n\t}\n};\n\nconst getContact = id => {\n\tlet savedContactList = localStorage.getItem('contacts');\n\n\tif (savedContactList) {\n\t\tsavedContactList = JSON.parse(savedContactList);\n\n\t\tif (savedContactList) {\n\t\t\treturn savedContactList[id];\n\t\t}\n\t}\n};\n\nconst addContact = contact => {\n\tlet savedContactList = getContactList();\n\n\tif (savedContactList == null) {\n\t\tlocalStorage.setItem('contacts', '[]');\n\t\tsavedContactList = getContactList();\n\t}\n\n\tsavedContactList.push(contact);\n\n\tlocalStorage.setItem('contacts', JSON.stringify(savedContactList));\n};\n\nconst editContact = (id, contact) => {\n\tlet savedContactList = getContactList();\n\n\tif (savedContactList) {\n\t\tsavedContactList.splice(id, 1, contact);\n\n\t\tlocalStorage.setItem('contacts', JSON.stringify(savedContactList));\n\t}\n};\n\nconst removeContact = id => {\n\tlet savedContactList = localStorage.getItem('contacts');\n\n\tif (savedContactList) {\n\t\tsavedContactList = JSON.parse(savedContactList);\n\n\t\tif (savedContactList) {\n\t\t\tsavedContactList.splice(id, 1);\n\n\t\t\tif (savedContactList.length > 0) {\n\t\t\t\tlocalStorage.setItem(\n\t\t\t\t\t'contacts',\n\t\t\t\t\tJSON.stringify(savedContactList)\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tlocalStorage.removeItem('contacts');\n\t\t\t}\n\t\t}\n\t}\n};\n\nexport { getContactList, getContact, addContact, editContact, removeContact };\n","import React, { ReactChild } from 'react';\nimport cx from 'classnames';\n\nimport './Title.scss';\n\ntype ITitle = {\n\tclassName?: string;\n\tchildren: ReactChild;\n};\n\nconst Title: React.FC<ITitle> = ({ className, children }) => {\n\treturn <h1 className={cx('Title', className)}>{children}</h1>;\n};\n\nexport default Title;\n","import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport Contact from './Contact';\nimport { getContactList } from '../../utils/contacts';\nimport Title from '../../components/Title';\nimport './ContactList.scss';\n\ninterface IContact {\n\tlastName: string;\n\tfirstName: string;\n\tmiddleName: string;\n}\n\nconst ContactList: React.FC = () => {\n\tconst [contacts, setContacts] = useState<Array<IContact> | null>(null);\n\n\tuseEffect(() => {\n\t\tsetContacts(getContactList());\n\t}, []);\n\n\treturn (\n\t\t<div className=\"ContactList\">\n\t\t\t<header className=\"ContactList-Header\">\n\t\t\t\t<Title className=\"ContactList-Title\">Contacts</Title>\n\t\t\t\t<Link to=\"/new\" className=\"ContactList-Button\">\n\t\t\t\t\t+\n\t\t\t\t</Link>\n\t\t\t</header>\n\n\t\t\t{contacts &&\n\t\t\t\tcontacts.map((data, i) => (\n\t\t\t\t\t<Contact data={data} id={i} key={i} />\n\t\t\t\t))}\n\n\t\t\t{!contacts && (\n\t\t\t\t<div className=\"ContactList-Caption\">\n\t\t\t\t\tЗдесь будут ваши контакты\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</div>\n\t);\n};\n\nexport default ContactList;\n","import React, { FC } from 'react';\nimport { Link } from 'react-router-dom';\nimport cx from 'classnames';\n\nimport './ContactLink.scss';\n\ntype IContactLink = {\n\tclassName?: string;\n};\n\nconst ContactLink: FC<IContactLink> = ({ className }) => {\n\treturn (\n\t\t<Link to=\"/\" className={cx('ContactLink', className)}>\n\t\t\tContacts\n\t\t</Link>\n\t);\n};\n\nexport default ContactLink;\n","import React, {\n\tuseState,\n\tuseCallback,\n\tChangeEvent,\n\tMouseEvent,\n\tKeyboardEvent\n} from 'react';\nimport { Redirect } from 'react-router-dom';\nimport cx from 'classnames';\n\nimport { editContact, removeContact } from '../../utils/contacts';\nimport './ContactForm.scss';\n\ntype IContact = {\n\t[key: string]: any;\n\tlastName?: string;\n\tfirstName?: string;\n\tmiddleName?: string;\n\tphone?: string;\n\temail?: string;\n};\n\ntype IContactForm = {\n\tinitialState?: IContact;\n\tid: number;\n\tbusinessFunc?: (name: any) => void;\n\tautoFocus?: boolean;\n\tbuttons?: Array<string>;\n\tedit?: boolean;\n};\n\nconst logic = (name: any) => name;\n\nconst ContactForm: React.FC<IContactForm> = ({\n\tinitialState = null,\n\tid,\n\tbusinessFunc = logic('name'),\n\tbuttons = [],\n\tautoFocus = false,\n\tedit = false\n}) => {\n\tconst [contactAdded, isContactAdded] = useState<boolean>(false);\n\tconst [contactProcessed, isContactProcessed] = useState<boolean>(false);\n\tconst [contact, setContact] = useState<IContact | null>(initialState);\n\n\tconst handleInputChange = useCallback(\n\t\t(e: ChangeEvent<HTMLInputElement>) => {\n\t\t\tconst { name, value } = e.target;\n\t\t\tsetContact({ ...contact, [name]: value });\n\n\t\t\tif (edit) editContact(id, { ...contact, [name]: value });\n\t\t},\n\t\t[id, contact, setContact, edit]\n\t);\n\n\tconst handleInputKeyPress = useCallback((e: KeyboardEvent) => {\n\t\tconst { key } = e;\n\n\t\tif (key === 'Enter') {\n\t\t\tisContactProcessed(true);\n\t\t}\n\t}, []);\n\n\tconst handleSubmit = useCallback(\n\t\t(e: ChangeEvent<HTMLFormElement>) => {\n\t\t\te.preventDefault();\n\n\t\t\tif (!edit) {\n\t\t\t\tbusinessFunc(contact);\n\t\t\t\tisContactAdded(true);\n\t\t\t} else {\n\t\t\t\tisContactProcessed(true);\n\t\t\t}\n\t\t},\n\t\t[businessFunc, contact, edit, isContactAdded, isContactProcessed]\n\t);\n\n\tif (contactProcessed) {\n\t\treturn <Redirect to=\"/\" />;\n\t}\n\n\tif (contactAdded) {\n\t\treturn <Redirect to={`/contact/${id}`} />;\n\t}\n\n\treturn (\n\t\t<form className=\"ContactForm\" onSubmit={handleSubmit}>\n\t\t\t<div className=\"ContactForm-InputGroup\">\n\t\t\t\t{[\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'lastName',\n\t\t\t\t\t\ttext: 'Last Name'\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'firstName',\n\t\t\t\t\t\ttext: 'First Name'\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'middleName',\n\t\t\t\t\t\ttext: 'Middle Name'\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'phone',\n\t\t\t\t\t\ttext: 'Phone'\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'email',\n\t\t\t\t\t\ttext: 'Email'\n\t\t\t\t\t}\n\t\t\t\t].map(({ name, text }, i) => (\n\t\t\t\t\t<input\n\t\t\t\t\t\tclassName={cx('ContactForm-Input', {\n\t\t\t\t\t\t\t'ContactForm-Input_space': i === 3\n\t\t\t\t\t\t})}\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tname={name}\n\t\t\t\t\t\tplaceholder={text}\n\t\t\t\t\t\tautoFocus={i === 0 ? autoFocus : false}\n\t\t\t\t\t\tvalue={contact ? contact[name] : ''}\n\t\t\t\t\t\tonChange={handleInputChange}\n\t\t\t\t\t\tonKeyPress={edit ? handleInputKeyPress : undefined}\n\t\t\t\t\t\tkey={i}\n\t\t\t\t\t/>\n\t\t\t\t))}\n\t\t\t</div>\n\n\t\t\t{buttons.map((item, i) => {\n\t\t\t\tswitch (item) {\n\t\t\t\t\tcase 'create':\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<button className=\"ContactForm-Button\" key={i}>\n\t\t\t\t\t\t\t\tAdd contact\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t);\n\t\t\t\t\tcase 'delete':\n\t\t\t\t\t\tconst handleRemoveClick = (e: MouseEvent) => {\n\t\t\t\t\t\t\te.preventDefault();\n\n\t\t\t\t\t\t\tremoveContact(id);\n\n\t\t\t\t\t\t\tisContactProcessed(true);\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\tclassName=\"ContactForm-Button ContactForm-Button_danger\"\n\t\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t\tonClick={handleRemoveClick}\n\t\t\t\t\t\t\t\tkey={i}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tRemove contact\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t);\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t})}\n\t\t</form>\n\t);\n};\n\nexport default ContactForm;\n","import React from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { getContact } from '../../utils/contacts';\nimport ContactLink from '../../components/ContactLink';\nimport Title from '../../components/Title';\nimport ContactForm from '../../components/ContactForm';\nimport './ContactDesc.scss';\n\nconst ContactDesc: React.FC = () => {\n\tlet { id } = useParams();\n\tconst contact: any = getContact(Number(id));\n\n\treturn (\n\t\t<div className=\"ContactDesc\">\n\t\t\t<ContactLink />\n\t\t\t<Title className=\"ContactDesc-Title\">Contact</Title>\n\t\t\t<ContactForm\n\t\t\t\tinitialState={contact}\n\t\t\t\tid={Number(id)}\n\t\t\t\tbuttons={['delete']}\n\t\t\t\tedit={true}\n\t\t\t/>\n\t\t</div>\n\t);\n};\n\nexport default ContactDesc;\n","import React from 'react';\n\nimport ContactForm from '../../components/ContactForm';\nimport { getContactList, addContact } from '../../utils/contacts';\nimport ContactLink from '../../components/ContactLink';\nimport Title from '../../components/Title';\nimport './ContactAdd.scss';\n\nconst ContactAdd: React.FC = () => {\n\tconst id = getContactList() ? getContactList().length : 0;\n\tconst businessFunc = addContact;\n\n\treturn (\n\t\t<div className=\"ContactAdd\">\n\t\t\t<ContactLink />\n\t\t\t<Title className=\"ContactAdd-Title\">New Contact</Title>\n\t\t\t<ContactForm\n\t\t\t\tid={id}\n\t\t\t\tbusinessFunc={businessFunc}\n\t\t\t\tautoFocus={true}\n\t\t\t\tbuttons={['create']}\n\t\t\t/>\n\t\t</div>\n\t);\n};\n\nexport default ContactAdd;\n","import React from 'react';\nimport { BrowserRouter, Switch, Route, Redirect } from 'react-router-dom';\n\nimport ContactList from '../ContactList';\nimport ContactDesc from '../ContactDesc';\nimport ContactAdd from '../ContactAdd';\nimport './App.scss';\n\nconst App: React.FC = () => {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<BrowserRouter>\n\t\t\t\t<Switch>\n\t\t\t\t\t<Route path=\"/\" component={ContactList} exact />\n\t\t\t\t\t<Route path=\"/contact/:id\" component={ContactDesc} />\n\t\t\t\t\t<Route path=\"/new\" component={ContactAdd} />\n\t\t\t\t\t<Redirect to=\"/\" />\n\t\t\t\t</Switch>\n\t\t\t</BrowserRouter>\n\t\t</div>\n\t);\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport * as serviceWorker from './serviceWorker';\nimport App from './pages/App';\nimport './index.scss';\n\nconst startApp = () => {\n\tReactDOM.render(<App />, document.getElementById('root'));\n\tserviceWorker.register();\n};\n\nif ('cordova' in window) {\n\tdocument.addEventListener('deviceready', startApp, false);\n} else {\n\tstartApp();\n}\n"],"sourceRoot":""}